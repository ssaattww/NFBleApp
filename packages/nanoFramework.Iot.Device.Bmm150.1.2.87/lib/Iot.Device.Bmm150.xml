<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Iot.Device.Bmm150</name>
    </assembly>
    <members>
        <member name="T:Iot.Device.Magnetometer.Bmm150">
            <summary>
            Bmm150 class implementing a magnetometer.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Bmm150._i2cDevice">
            <summary>
            I2c device comm channel.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Bmm150._bmm150Interface">
            <summary>
            Bmm150 device interface.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Bmm150._trimData">
            <summary>
            Bmm150 Trim extended register data.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Bmm150._rHall">
            <summary>
            Magnetometer (R-HALL) temperature compensation value, used in axis compensation calculation functions.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Bmm150._shouldDispose">
            <summary>
            Flag to evaluate disposal of resources.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150.CalibrationCompensation">
            <summary>
            Gets or sets Magnetometer calibration compensation vector.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Bmm150.PrimaryI2cAddress">
            <summary>
            Primary I2C address for the Bmm150
            In the official sheet (P36) states that address is 0x13.
            Visit https://github.com/m5stack/M5_BMM150/blob/master/src/M5_BMM150_DEFS.h#L16.3 for more information.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Bmm150.SecondaryI2cAddress">
            <summary>
            Secondary I2C address for the Bmm150
            In the official sheet (P36) states that address is 0x13, alhtough for m5stack is 0x10.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150.DefaultTimeout">
            <summary>
            Gets or sets default timeout to use when timeout is not provided in the reading methods.
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Magnetometer.Bmm150" /> class.
            </summary>
            <param name="i2CDevice">The I2C device.</param>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Magnetometer.Bmm150I2cBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Magnetometer.Bmm150" /> class.
            </summary>
            <param name="i2cDevice">The I2C device.</param>
            <param name="bmm150Interface">The specific interface to communicate with the Bmm150.</param>
            <param name="shouldDispose">True to dispose the I2C device when class is disposed.</param>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.ReadTrimRegisters">
            <summary>
            Reads the trim registers of the sensor, used in compensation (x,y,z) calculation
            Visit https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1199 for more information.
            </summary>
            <returns>Trim registers value.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.Initialize">
            <summary>
            Starts the Bmm150 init sequence.
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.GetDeviceInfo">
            <summary>
            Get the device information.
            </summary>
            <returns>The device information.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.CalibrateMagnetometer(System.Int32)">
            <summary>
            Calibrate the magnetometer. 
            Please make sure you are not close to any magnetic field like magnet or phone
            Please make sure you are moving the magnetometer all over space, rotating it.
            Visit https://platformio.org/lib/show/12697/M5_BMM150 for more information.
            </summary>
            <param name="numberOfMeasurements">Number of measurement for the calibration, default is 100.</param>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150.HasDataToRead">
            <summary>
            True if there is a data to read.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150.IsVersionCorrect">
            <summary>
            Check if the version is the correct one (0x32). This is fixed for this device.
            </summary>
            <returns>Returns true if the version match.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.ReadMagnetometerWithoutCorrection(System.Boolean)">
            <summary>
            Read the magnetometer without Bias correction and can wait for new data to be present.
            </summary>
            <param name="waitForData"><see langword="true"/> to wait for new data.</param>
            <returns>The data from the magnetometer.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.ReadMagnetometerWithoutCorrection(System.Boolean,System.TimeSpan)">
            <summary>
            Read the magnetometer without Bias correction and can wait for new data to be present
            Visit https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L921 for more information.
            </summary>
            <param name="waitForData"><see langword="true"/> to wait for new data.</param>
            <param name="timeout">Timeout for waiting the data, ignored if <paramref name="waitForData"/> is <see langword="false"/>.</param>
            <returns>The data from the magnetometer.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.ReadMagnetometer(System.Boolean)">
            <summary>
            Read the magnetometer with bias correction and can wait for new data to be present.
            </summary>
            <param name="waitForData"><see langword="true"/> to wait for new data.</param>
            <returns>The data from the magnetometer.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.ReadMagnetometer(System.Boolean,System.TimeSpan)">
            <summary>
            Read the magnetometer with compensation calculation and can wait for new data to be present.
            </summary>
            <param name="waitForData"><see langword="true"/> to wait for new data.</param>
            <param name="timeout">Timeout for waiting the data, ignored if <paramref name="waitForData"/> is <see langword="false"/>.</param>
            <returns>The data from the magnetometer.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Iot.Device.Magnetometer.Bmm150Compensation">
            <summary>
            Implements the Bmm150 magnetic field data (off-chip) temperature compensation functions
            https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmm150-ds001.pdf
            Page 15.
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150Compensation.CompensateX(System.Double,System.UInt32,Iot.Device.Magnetometer.Bmm150TrimRegisterData)">
            <summary>
            Returns the compensated magnetometer x axis data(micro-tesla) in float.
            More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1614.
            </summary>
            <param name="x">Axis raw value.</param>
            <param name="rhall">Temperature compensation value (RHALL).</param>
            <param name="trimData">Trim registers values.</param>
            <returns>Compensated magnetometer x axis data(micro-tesla) in float.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150Compensation.CompensateY(System.Double,System.UInt32,Iot.Device.Magnetometer.Bmm150TrimRegisterData)">
            <summary>
            Returns the compensated magnetometer y axis data(micro-tesla) in float.
            More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1648.
            </summary>
            <param name="y">Axis raw value.</param>
            <param name="rhall">Temperature compensation value (RHALL).</param>
            <param name="trimData">Trim registers values.</param>
            <returns>Compensated magnetometer y axis data(micro-tesla) in float.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150Compensation.CompensateZ(System.Double,System.UInt32,Iot.Device.Magnetometer.Bmm150TrimRegisterData)">
            <summary>
            Returns the compensated magnetometer z axis data(micro-tesla) in float
            More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1682.
            </summary>
            <param name="z">Axis raw value.</param>
            <param name="rhall">Temperature compensation value (RHALL).</param>
            <param name="trimData">Trim registers values.</param>
            <returns>Compensated magnetometer z axis data(micro-tesla) in float.</returns>
        </member>
        <member name="T:Iot.Device.Magnetometer.Bmm150I2c">
            <summary>
            Default I2C interface for the Bmm150.
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150I2c.ReadByte(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            Read a byte.
            </summary>
            <param name="i2cDevice">An I2C device.</param>
            <param name="reg">The register to read.</param>
            <returns>The register value.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150I2c.ReadBytes(System.Device.I2c.I2cDevice,System.Byte,System.SpanByte)">
            <summary>
            Read a byte array.
            </summary>
            <param name="i2cDevice">An I2C device.</param>
            <param name="reg">The register to read.</param>
            <param name="readBytes">A span of bytes with the read values.</param>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150I2c.WriteRegister(System.Device.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
            Write a byte.
            </summary>
            <param name="i2cDevice">An I2C device.</param>
            <param name="reg">The register to read.</param>
            <param name="data">A byte to write.</param>
        </member>
        <member name="T:Iot.Device.Magnetometer.Bmm150I2cBase">
            <summary>
            Abstract class for Bmm150 the I2C interface. This sensor can be found as a sub
            I2C sensor like in the MPU9250. The access is done thru another I2C device and the
            core I2C primitive are different. Use those 3 primitive to define the access to read
            and write bytes to the Bmm150.
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150I2cBase.WriteRegister(System.Device.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
            Write a register of the Bmm150.
            </summary>
            <param name="i2CDevice">I2C device.</param>
            <param name="reg">The register to write.</param>
            <param name="data">The data byte to write.</param>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150I2cBase.ReadByte(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            Read a byte on a specific register.
            </summary>
            <param name="i2CDevice">I2C device.</param>
            <param name="reg">The register to read.</param>
            <returns>The register value.</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150I2cBase.ReadBytes(System.Device.I2c.I2cDevice,System.Byte,System.SpanByte)">
            <summary>
            Read bytes on a specific Bmm150 register.
            </summary>
            <param name="i2CDevice">I2C device.</param>
            <param name="reg">The register to read.</param>
            <param name="readBytes">Span of byte to store the data read.</param>
        </member>
        <member name="T:Iot.Device.Magnetometer.Bmm150TrimRegisterData">
            <summary>
            Represents the trim registers of the sensor (trim values in the "trim_data" of device structure).
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigX1">
            <summary>
            Gets or sets trim DigX1 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigY1">
            <summary>
            Gets or sets trim DigY1 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigX2">
            <summary>
            Gets or sets trim DigX2 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigY2">
            <summary>
            Gets or sets trim DigY2 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigZ1">
            <summary>
            Gets or sets trim DigZ1 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigZ2">
            <summary>
            Gets or sets trim DigZ2 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigZ3">
            <summary>
            Gets or sets trim DigZ3 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigZ4">
            <summary>
            Gets or sets trim DigZ4 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigXy1">
            <summary>
            Gets or sets trim DigXy1 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigXy2">
            <summary>
            Gets or sets trim DigXy2 data.
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Bmm150TrimRegisterData.DigXyz1">
            <summary>
            Gets or sets trim DigXyz1 data.
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Bmm150TrimRegisterData.#ctor(System.SpanByte,System.SpanByte,System.SpanByte)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Magnetometer.Bmm150TrimRegisterData" /> class.
            </summary>
            <param name="trimX1y1Data">TrimX1y1Data bytes.</param>
            <param name="trimXyzData">TrimXyzData bytes.</param>
            <param name="trimXy1Xy2Data">TrimXy1Xy2Data bytes.</param>
        </member>
        <member name="T:Iot.Device.Magnetometer.Register">
            <summary>
            Registers of the Bmm150.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.BMM150_DIG_X1">
            <summary>
            Trim extended register.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.BMM150_DIG_Z4_LSB">
            <summary>
            Trim extended register.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.BMM150_DIG_Z2_LSB">
            <summary>
            Trim extended register.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.WIA">
            <summary>
            WIA: Device ID.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.INFO">
            <summary>
            INFO: Information.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.DATA_READY_STATUS">
            <summary>
            DATA_READY_STATUS: Page 25, data ready status.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HXL">
            <summary>
            X-axis measurement data lower 8bit.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HXH">
            <summary>
            X-axis measurement data higher 8bit.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HYL">
            <summary>
            Y-axis measurement data lower 8bit.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HYH">
            <summary>
            Y-axis measurement data higher 8bit.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HZL">
            <summary>
            Z-axis measurement data lower 8bit.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HZH">
            <summary>
            Z-axis measurement data higher 8bit.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.POWER_CONTROL_ADDR">
            <summary>
            Power control address.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.OP_MODE_ADDR">
            <summary>
            Op mode address.
            </summary>
        </member>
    </members>
</doc>

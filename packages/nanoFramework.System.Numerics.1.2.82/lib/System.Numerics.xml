<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Numerics</name>
    </assembly>
    <members>
        <member name="M:System.Numerics.HashCodeHelper.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Combines two hash codes, useful for combining hash codes of individual vector elements
            </summary>
        </member>
        <member name="T:System.Numerics.Matrix3x2">
            <summary>
            A structure encapsulating a 3x2 matrix.
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3x2.M11">
            <summary>
            The first element of the first row
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3x2.M12">
            <summary>
            The second element of the first row
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3x2.M21">
            <summary>
            The first element of the second row
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3x2.M22">
            <summary>
            The second element of the second row
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3x2.M31">
            <summary>
            The first element of the third row
            </summary>
        </member>
        <member name="F:System.Numerics.Matrix3x2.M32">
            <summary>
            The second element of the third row
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3x2.Identity">
            <summary>
            Returns the multiplicative identity matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3x2.IsIdentity">
            <summary>
            Returns whether the matrix is the identity matrix.
            </summary>
        </member>
        <member name="P:System.Numerics.Matrix3x2.Translation">
            <summary>
            Gets or sets the translation component of this matrix.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3x2.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Matrix3x2 from the given components.
            </summary>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
            <summary>
            Creates a translation matrix from the given vector.
            </summary>
            <param name="position">The translation position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Double,System.Double)">
            <summary>
            Creates a translation matrix from the given X and Y components.
            </summary>
            <param name="xPosition">The X position.</param>
            <param name="yPosition">The Y position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Double,System.Double)">
            <summary>
            Creates a scale matrix from the given X and Y components.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Double,System.Double,System.Numerics.Vector2)">
            <summary>
            Creates a scale matrix that is offset by a given center point.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
            <summary>
            Creates a scale matrix from the given vector scale.
            </summary>
            <param name="scales">The scale to use.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Creates a scale matrix from the given vector scale with an offset from the given center point.
            </summary>
            <param name="scales">The scale to use.</param>
            <param name="centerPoint">The center offset.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Double)">
            <summary>
            Creates a scale matrix that scales uniformly with the given scale.
            </summary>
            <param name="scale">The uniform scale to use.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Double,System.Numerics.Vector2)">
            <summary>
            Creates a scale matrix that scales uniformly with the given scale with an offset from the given center.
            </summary>
            <param name="scale">The uniform scale to use.</param>
            <param name="centerPoint">The center offset.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Double,System.Double)">
            <summary>
            Creates a skew matrix from the given angles in radians.
            </summary>
            <param name="radiansX">The X angle, in radians.</param>
            <param name="radiansY">The Y angle, in radians.</param>
            <returns>A skew matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Double,System.Double,System.Numerics.Vector2)">
            <summary>
            Creates a skew matrix from the given angles in radians and a center point.
            </summary>
            <param name="radiansX">The X angle, in radians.</param>
            <param name="radiansY">The Y angle, in radians.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A skew matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Double)">
            <summary>
            Creates a rotation matrix using the given rotation in radians.
            </summary>
            <param name="radians">The amount of rotation, in radians.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Double,System.Numerics.Vector2)">
            <summary>
            Creates a rotation matrix using the given rotation in radians and a center point.
            </summary>
            <param name="radians">The amount of rotation, in radians.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
            <summary>
            Calculates the determinant for this matrix. 
            The determinant is calculated by expanding the matrix with a third column whose values are (0,0,1).
            </summary>
            <returns>The determinant.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
            <summary>
            Attempts to invert the given matrix. If the operation succeeds, the inverted matrix is stored in the result parameter.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="result">The output matrix.</param>
            <returns>True if the operation succeeded, False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Double)">
            <summary>
            Linearly interpolates from matrix1 to matrix2, based on the third parameter.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weighting of matrix2.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
            <summary>
            Negates the given matrix by multiplying all values by -1.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Adds each matrix element in value1 with its corresponding element in value2.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the summed values.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Subtracts each matrix element in value2 from its corresponding element in value1.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the resulting values.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Multiplies two matrices together and returns the resulting matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Double)">
            <summary>
            Scales all elements in a matrix by the given scalar factor.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling value to use.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
            <summary>
            Negates the given matrix by multiplying all values by -1.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Adds each matrix element in value1 with its corresponding element in value2.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the summed values.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Subtracts each matrix element in value2 from its corresponding element in value1.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the resulting values.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Multiplies two matrices together and returns the resulting matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Double)">
            <summary>
            Scales all elements in a matrix by the given scalar factor.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling value to use.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Returns a boolean indicating whether the given matrices are equal.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Returns a boolean indicating whether the given matrices are not equal.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
            <summary>
            Returns a boolean indicating whether the matrix is equal to the other given matrix.
            </summary>
            <param name="other">The other matrix to test equality against.</param>
            <returns>True if this matrix is equal to other; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this matrix instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.ToString">
            <summary>
            Returns a String representing this matrix instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Matrix3x2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:System.Numerics.Quaternion">
            <summary>
            A structure encapsulating a four-dimensional vector (x,y,z,w), 
            which is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where w = cos(theta/2).
            </summary>
        </member>
        <member name="F:System.Numerics.Quaternion.X">
            <summary>
            Specifies the X-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="F:System.Numerics.Quaternion.Y">
            <summary>
            Specifies the Y-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="F:System.Numerics.Quaternion.Z">
            <summary>
            Specifies the Z-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="F:System.Numerics.Quaternion.W">
            <summary>
            Specifies the rotation component of the Quaternion.
            </summary>
        </member>
        <member name="P:System.Numerics.Quaternion.Identity">
            <summary>
            Returns a Quaternion representing no rotation. 
            </summary>
        </member>
        <member name="P:System.Numerics.Quaternion.IsIdentity">
            <summary>
            Returns whether the Quaternion is the identity Quaternion.
            </summary>
        </member>
        <member name="M:System.Numerics.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Quaternion from the given components.
            </summary>
            <param name="x">The X component of the Quaternion.</param>
            <param name="y">The Y component of the Quaternion.</param>
            <param name="z">The Z component of the Quaternion.</param>
            <param name="w">The W component of the Quaternion.</param>
        </member>
        <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Double)">
            <summary>
            Constructs a Quaternion from the given vector and rotation parts.
            </summary>
            <param name="vectorPart">The vector part of the Quaternion.</param>
            <param name="scalarPart">The rotation part of the Quaternion.</param>
        </member>
        <member name="M:System.Numerics.Quaternion.Length">
            <summary>
            Calculates the length of the Quaternion.
            </summary>
            <returns>The computed length of the Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.LengthSquared">
            <summary>
            Calculates the length squared of the Quaternion. This operation is cheaper than Length().
            </summary>
            <returns>The length squared of the Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
            <summary>
            Divides each component of the Quaternion by the length of the Quaternion.
            </summary>
            <param name="value">The source Quaternion.</param>
            <returns>The normalized Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
            <summary>
            Creates the conjugate of a specified Quaternion.
            </summary>
            <param name="value">The Quaternion of which to return the conjugate.</param>
            <returns>A new Quaternion that is the conjugate of the specified one.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
            <summary>
            Returns the inverse of a Quaternion.
            </summary>
            <param name="value">The source Quaternion.</param>
            <returns>The inverted Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Double)">
            <summary>
            Creates a Quaternion from a vector and an angle to rotate about the vector.
            </summary>
            <param name="axis">The vector to rotate around.</param>
            <param name="angle">The angle, in radians, to rotate around the vector.</param>
            <returns>The created Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new Quaternion from the given yaw, pitch, and roll, in radians.
            </summary>
            <param name="yaw">The yaw angle, in radians, around the Y-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the X-axis.</param>
            <param name="roll">The roll angle, in radians, around the Z-axis.</param>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Calculates the dot product of two Quaternions.
            </summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <returns>The dot product of the Quaternions.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Double)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <param name="amount">The relative weight of the second source Quaternion in the interpolation.</param>
            <returns>The interpolated Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Double)">
            <summary>
             Linearly interpolates between two quaternions.
            </summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <param name="amount">The relative weight of the second source Quaternion in the interpolation.</param>
            <returns>The interpolated Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.
            </summary>
            <param name="value1">The first Quaternion rotation in the series.</param>
            <param name="value2">The second Quaternion rotation in the series.</param>
            <returns>A new Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="value">The source Quaternion.</param>
            <returns>The negated Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Adds two Quaternions element-by-element.
            </summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second source Quaternion.</param>
            <returns>The result of adding the Quaternions.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Subtracts one Quaternion from another.
            </summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second Quaternion, to be subtracted from the first.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="value1">The Quaternion on the left side of the multiplication.</param>
            <param name="value2">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Double)">
            <summary>
            Multiplies a Quaternion by a scalar value.
            </summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
            <summary>
            Flips the sign of each component of the quaternion.
            </summary>
            <param name="value">The source Quaternion.</param>
            <returns>The negated Quaternion.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Adds two Quaternions element-by-element.
            </summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second source Quaternion.</param>
            <returns>The result of adding the Quaternions.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Subtracts one Quaternion from another.
            </summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second Quaternion, to be subtracted from the first.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="value1">The Quaternion on the left side of the multiplication.</param>
            <param name="value2">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Double)">
            <summary>
            Multiplies a Quaternion by a scalar value.
            </summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Returns a boolean indicating whether the two given Quaternions are equal.
            </summary>
            <param name="value1">The first Quaternion to compare.</param>
            <param name="value2">The second Quaternion to compare.</param>
            <returns>True if the Quaternions are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Returns a boolean indicating whether the two given Quaternions are not equal.
            </summary>
            <param name="value1">The first Quaternion to compare.</param>
            <param name="value2">The second Quaternion to compare.</param>
            <returns>True if the Quaternions are not equal; False if they are equal.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
            <summary>
            Returns a boolean indicating whether the given Quaternion is equal to this Quaternion instance.
            </summary>
            <param name="other">The Quaternion to compare this instance to.</param>
            <returns>True if the other Quaternion is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Quaternion instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Quaternion; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.ToString">
            <summary>
            Returns a String representing this Quaternion instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:System.Numerics.Vector2">
            <summary>
            A structure encapsulating two double values and provides hardware accelerated methods.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector2.Zero">
            <summary>
            Returns the vector (0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector2.One">
            <summary>
            Returns the vector (1,1).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector2.UnitX">
            <summary>
            Returns the vector (1,0).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector2.UnitY">
            <summary>
            Returns the vector (0,1).
            </summary>
        </member>
        <member name="M:System.Numerics.Vector2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Vector2 instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector2; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.ToString">
            <summary>
            Returns a String representing this Vector2 instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.ToString(System.String)">
            <summary>
            Returns a String representing this Vector2 instance, using the specified format to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.LengthSquared">
            <summary>
            Returns the length of the vector squared. This operation is cheaper than Length().
            </summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal of the surface being reflected off.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Double)">
            <summary>
            Linearly interpolates between two vectors based on the given weighting.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Multiply(System.Double,System.Numerics.Vector2)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="F:System.Numerics.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector2.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:System.Numerics.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:System.Numerics.Vector2.CopyTo(System.Double[])">
            <summary>
            Copies the contents of the vector into the given array.
            </summary>
            <param name="array">The destination array.</param>
        </member>
        <member name="M:System.Numerics.Vector2.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="!:RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array
            or if there are not enough elements to copy.</exception>
        </member>
        <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
            <summary>
            Returns a boolean indicating whether the given Vector2 is equal to this Vector2 instance.
            </summary>
            <param name="other">The Vector2 to compare this instance to.</param>
            <returns>True if the other Vector2 is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors
            </summary>
            <param name="value1">The first source vector</param>
            <param name="value2">The second source vector</param>
            <returns>The maximized vector</returns>
        </member>
        <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>        
        </member>
        <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Multiply(System.Double,System.Numerics.Vector2)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="T:System.Numerics.Vector3">
            <summary>
            A structure encapsulating three doule values and provides hardware accelerated methods.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector3.Zero">
            <summary>
            Returns the vector (0,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector3.One">
            <summary>
            Returns the vector (1,1,1).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector3.UnitX">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector3.UnitZ">
            <summary>
            Returns the vector (0,1,0).
            </summary>        public static Vector3 UnitY { get { return new Vector3(0.0, 1.0, 0.0); } }
            <summary>
            Returns the vector (0,0,1).
            </summary>
        </member>
        <member name="M:System.Numerics.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Vector3 instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector3; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.ToString">
            <summary>
            Returns a String representing this Vector3 instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.ToString(System.String)">
            <summary>
            Returns a String representing this Vector3 instance, using the specified format to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.LengthSquared">
            <summary>
            Returns the length of the vector squared. This operation is cheaper than Length().
            </summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal of the surface being reflected off.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Double)">
            <summary>
            Linearly interpolates between two vectors based on the given weighting.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Multiply(System.Double,System.Numerics.Vector3)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="F:System.Numerics.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector3.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Double)">
            <summary>
            Constructs a Vector3 from the given Vector2 and a third value.
            </summary>
            <param name="value">The Vector to extract X and Y components from.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:System.Numerics.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:System.Numerics.Vector3.CopyTo(System.Double[])">
            <summary>
            Copies the contents of the vector into the given array.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector3.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from index.
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="!:RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array.</exception>
        </member>
        <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
            <summary>
            Returns a boolean indicating whether the given Vector3 is equal to this Vector3 instance.
            </summary>
            <param name="other">The Vector3 to compare this instance to.</param>
            <returns>True if the other Vector3 is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Multiply(System.Double,System.Numerics.Vector3)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="T:System.Numerics.Vector4">
            <summary>
            A structure encapsulating four doublevalues and provides hardware accelerated methods.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector4.Zero">
            <summary>
            Returns the vector (0,0,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector4.One">
            <summary>
            Returns the vector (1,1,1,1).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector4.UnitX">
            <summary>
            Returns the vector (1,0,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector4.UnitY">
            <summary>
            Returns the vector (0,1,0,0).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector4.UnitZ">
            <summary>
            Returns the vector (0,0,1,0).
            </summary>
        </member>
        <member name="P:System.Numerics.Vector4.UnitW">
            <summary>
            Returns the vector (0,0,0,1).
            </summary>
        </member>
        <member name="M:System.Numerics.Vector4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Vector4 instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector4; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.ToString">
            <summary>
            Returns a String representing this Vector4 instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.ToString(System.String)">
            <summary>
            Returns a String representing this Vector4 instance, using the specified format to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Length">
            <summary>
            Returns the length of the vector. This operation is cheaper than Length().
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.LengthSquared">
            <summary>
            Returns the length of the vector squared.
            </summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Double)">
            <summary>
            Linearly interpolates between two vectors based on the given weighting.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Multiply(System.Double,System.Numerics.Vector4)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="F:System.Numerics.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:System.Numerics.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector4.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:System.Numerics.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="w">W component.</param>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Double,System.Double)">
            <summary>
            Constructs a Vector4 from the given Vector2 and a Z and W component.
            </summary>
            <param name="value">The vector to use as the X and Y components.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Double)">
            <summary>
            Constructs a Vector4 from the given Vector3 and a W component.
            </summary>
            <param name="value">The vector to use as the X, Y, and Z components.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:System.Numerics.Vector4.CopyTo(System.Double[])">
            <summary>
            Copies the contents of the vector into the given array.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector4.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from index.
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="!:RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array.</exception>
        </member>
        <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
            <summary>
            Returns a boolean indicating whether the given Vector4 is equal to this Vector4 instance.
            </summary>
            <param name="other">The Vector4 to compare this instance to.</param>
            <returns>True if the other Vector4 is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Multiply(System.Double,System.Numerics.Vector4)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="T:System.Numerics.Vector">
            <summary>
            Contains various methods useful for creating, manipulating, combining, and converting generic vectors with one another.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
            <summary>
            Returns whether or not vector operations are subject to hardware acceleration through JIT intrinsic support.
            </summary>
        </member>
    </members>
</doc>
